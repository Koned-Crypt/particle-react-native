// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ParticleAA
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
@_exported import ParticleAA
import ParticleNetworkBase
import RxAlamofire
import RxSwift
import Swift
import SwiftyJSON
import SwiftyUserDefaults
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class AAService : ParticleNetworkBase.AAServiceProtocol {
  public static func initialize(name: ParticleNetworkBase.AA.AccountName? = nil, biconomyApiKeys: [Swift.Int : Swift.String])
  public init()
  final public func getSupportChainInfos() -> [ParticleNetworkBase.ParticleNetwork.ChainInfo]
  final public func isSupportChainInfo(_ chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo) -> Swift.Bool
  final public func rpcGetSmartAccount(eoaAddresses: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<[ParticleNetworkBase.AA.SmartAccountInfo]>
  final public func rpcGetFeeQuotes(eoaAddress: Swift.String, transactions: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<ParticleNetworkBase.AA.WholeFeeQuote>
  final public func rpcCreateUserOp(eoaAddress: Swift.String, transactions: [Swift.String], feeQuote: ParticleNetworkBase.AA.FeeQuote, tokenPaymasterAddress: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<ParticleNetworkBase.AA.UserOp>
  final public func rpcSendUserOp(eoaAddress: Swift.String, userOp: SwiftyJSON.JSON, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  final public func isDeploy(eoaAddress: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.Bool>
  final public func deployWalletContract(messageSigner: any ParticleNetworkBase.MessageSigner, feeMode: ParticleNetworkBase.AA.FeeMode, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  final public func isAAModeEnable() -> Swift.Bool
  final public func enableAAMode()
  final public func disableAAMode()
  final public func getSmartAccounts(by publicAddresses: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<[ParticleNetworkBase.AA.SmartAccountInfo]>
  final public func getSmartAccount(by publicAddress: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<ParticleNetworkBase.AA.SmartAccountInfo>
  @objc deinit
}
extension AAService {
  final public func quickSendTransactions(_ transactions: [Swift.String], feeMode: ParticleNetworkBase.AA.FeeMode, messageSigner: any ParticleNetworkBase.MessageSigner, wholeFeeQuote: ParticleNetworkBase.AA.WholeFeeQuote? = nil, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
}
