// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ParticleAuthCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AWSCore
import AWSKMS
import Alamofire
import AuthenticationServices
import Base58_swift
import BigInt
import CryptoSwift
import Foundation
import JavaScriptCore
import LocalAuthentication
@_exported import ParticleAuthCore
import ParticleMPCCore
import ParticleNetworkBase
import RxAlamofire
import RxCocoa
import RxSwift
import SDWebImage
import SDWebImageWebPCoder
import SkeletonView
import SnapKit
import Swift
import SwiftMessages
import SwiftyJSON
import SwiftyUserDefaults
import Then
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class CompressHelper {
  public static func decompress(data: Swift.String) -> Swift.String?
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(_ sender: Any?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
}
public protocol EVMWalletProtocol {
  func getAddress() -> Swift.String?
  #if compiler(>=5.3) && $AsyncAwait
  func personalSign(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func personalSignUnique(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func signTypedData(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func signTypedDataUnique(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func sendTransaction(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func sendTransaction(_ message: Swift.String, feeMode: ParticleNetworkBase.AA.FeeMode, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func request(method: Swift.String, parameters: [(any Swift.Encodable)?], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> SwiftyJSON.JSON
  #endif
}
public protocol SolanaWalletProtocol {
  func getAddress() -> Swift.String?
  #if compiler(>=5.3) && $AsyncAwait
  func signMessage(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func signTransaction(_ transaction: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func signAllTransactions(_ transactions: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> [Swift.String]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func signAndSendTransaction(_ transaction: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func request(method: Swift.String, parameters: [(any Swift.Encodable)?], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> SwiftyJSON.JSON
  #endif
}
public enum SyncUserInfoStatus : Swift.String {
  case success
  case userNotLogin
  case masterPasswordChanged
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ParticleAuthCore.Auth : AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  @objc dynamic public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
}
extension UIKit.UIColor {
  @frozen public enum ThemeColor {
    case current
    case theme0
    case theme1
    case theme2
    case theme3
    case theme4
    case theme5
    case theme6
    case theme7
    case theme8
    case theme9
    case theme10
    public static func == (a: UIKit.UIColor.ThemeColor, b: UIKit.UIColor.ThemeColor) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
infix operator >>> : BitwiseShiftPrecedence
public protocol NodeService {
  func rpc(method: Swift.String, parameters: [(any Swift.Encodable)?], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<SwiftyJSON.JSON>
}
@_hasMissingDesignatedInitializers public class NodeClient : ParticleAuthCore.NodeService {
  public func rpc(method: Swift.String, parameters: [(any Swift.Encodable)?], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<SwiftyJSON.JSON>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Auth : ObjectiveC.NSObject {
  final public let node: any ParticleAuthCore.NodeService
  public static var blindEnable: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension ParticleNetworkBase.ParticleNetwork.ResponseError {
  public static let walletChainIdNotMatch: ParticleNetworkBase.ParticleNetwork.ResponseError
}
@_hasMissingDesignatedInitializers public class SolanaWallet : ParticleAuthCore.SolanaWalletProtocol {
  public func getAddress() -> Swift.String?
  #if compiler(>=5.3) && $AsyncAwait
  public func signMessage(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signTransaction(_ transaction: Swift.String, chainInfo _: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signAllTransactions(_ transactions: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> [Swift.String]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signAndSendTransaction(_ transaction: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func request(method: Swift.String, parameters: [(any Swift.Encodable)?], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> SwiftyJSON.JSON
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EVMWallet : ParticleAuthCore.EVMWalletProtocol {
  public func getAddress() -> Swift.String?
  #if compiler(>=5.3) && $AsyncAwait
  public func personalSign(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func personalSignUnique(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signTypedData(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func signTypedDataUnique(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendTransaction(_ transaction: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendTransaction(_ transaction: Swift.String, feeMode: ParticleNetworkBase.AA.FeeMode, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func request(method: Swift.String, parameters: [(any Swift.Encodable)?], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) async throws -> SwiftyJSON.JSON
  #endif
  @objc deinit
}
extension ParticleAuthCore.Auth {
  public var solana: any ParticleAuthCore.SolanaWalletProtocol {
    get
  }
  public var evm: any ParticleAuthCore.EVMWalletProtocol {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func connect(jwt: Swift.String) async throws -> ParticleNetworkBase.UserInfo
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendEmailCode(email: Swift.String) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendPhoneCode(phone: Swift.String) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func connect(type: ParticleNetworkBase.LoginType, account: Swift.String? = nil, code: Swift.String? = nil, socialLoginPrompt: ParticleNetworkBase.SocialLoginPrompt? = nil) async throws -> ParticleNetworkBase.UserInfo
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func disconnect() async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func isConnected() async throws -> Swift.Bool
  #endif
  public func getUserInfo() -> ParticleNetworkBase.UserInfo?
  #if compiler(>=5.3) && $AsyncAwait
  public func switchChain(chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo) async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func presentLoginPage(type: ParticleNetworkBase.LoginType, account: Swift.String?, supportAuthType: [ParticleNetworkBase.SupportAuthType] = [SupportAuthType.all], socialLoginPrompt: ParticleNetworkBase.SocialLoginPrompt? = nil, config: ParticleNetworkBase.LoginPageConfig?) async throws -> ParticleNetworkBase.UserInfo
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func changeMasterPassword() async throws -> Swift.Bool
  #endif
  public func hasMasterPassword() throws -> Swift.Bool
  public func hasPaymentPassword() throws -> Swift.Bool
  public func openAccountAndSecurity() throws
  #if compiler(>=5.3) && $AsyncAwait
  public func syncUserInfo() async throws -> ParticleAuthCore.SyncUserInfoStatus
  #endif
  public static func loadCustomUIJsonString(_ jsonString: Swift.String) throws
  public static func setBlindEnable(_ enable: Swift.Bool)
  public static func getBlindEnable() -> Swift.Bool
}
extension ParticleAuthCore.Auth : ParticleNetworkBase.MessageSigner {
  public func signMessage(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  public func getEoaAddress() -> Swift.String
}
extension ParticleAuthCore.SyncUserInfoStatus : Swift.Equatable {}
extension ParticleAuthCore.SyncUserInfoStatus : Swift.Hashable {}
extension ParticleAuthCore.SyncUserInfoStatus : Swift.RawRepresentable {}
extension UIKit.UIColor.ThemeColor : Swift.Equatable {}
extension UIKit.UIColor.ThemeColor : Swift.Hashable {}
extension UIKit.UIColor.ThemeColor : Swift.Sendable {}
